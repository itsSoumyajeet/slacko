// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  slackWorkspaces SlackWorkspace[]
  scheduledMessages ScheduledMessage[]
}

model SlackWorkspace {
  id           String   @id @default(cuid())
  userId       String
  teamId       String   @unique
  teamName     String
  botUserId    String?
  botAccessToken String?
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens         SlackToken[]
  scheduledMessages ScheduledMessage[]
}

model SlackToken {
  id            String   @id @default(cuid())
  workspaceId   String
  accessToken   String
  refreshToken  String
  tokenType     String
  expiresAt     DateTime
  scope         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  workspace SlackWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ScheduledMessage {
  id           String   @id @default(cuid())
  userId       String
  workspaceId  String
  channelId    String
  message      String
  scheduledFor DateTime
  status       MessageStatus @default(PENDING)
  sentAt       DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace SlackWorkspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum MessageStatus {
  PENDING
  SENT
  CANCELLED
  FAILED
}